# Raspiaudio Mn Cast esphome voice sattelite
# heavily inspired by https://github.com/esphome/firmware/blob/main/voice-assistant/raspiaudio-muse-luxe.yaml
# RaspiAudio's Mn Cast Documentation
#   Arduino code https://github.com/RASPIAUDIO/mangaTEST 
#   Forum post https://forum.raspiaudio.com/t/mn-cast-installation-guide/587

# TO DO
# - include a simple display fonts https://esphome.io/components/display/index.html#fonts

substitutions:
  name: "raspiaudio-mn-cast"
  friendly_name: RaspiAudio Mn Cast
  project_name: "raspiaudio.mn-cast-voice-assistant"
  project_version: "1.0"

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: true
  project:
    name: ${project_name}
    version: ${project_version}
  min_version: 2023.10.0b1
  on_boot:
    - priority: -100
      then:
        - wait_until: api.connected
        - delay: 1s
        - if:
            condition:
              switch.is_on: use_wake_word
            then:
              - voice_assistant.start_continuous:

esp32:
  board: esp-wrover-kit
  framework:
    type: esp-idf

logger:
api:
ota:

dashboard_import:
  package_import_url: github://esphome/firmware/voice-assistant/raspiaudio-mn-cas.yaml@main


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  ap:
    ssid: ${name}
    password: "zHKO0UajEjag"

captive_portal:

improv_serial:

external_components:
  - source: github://pr#5230
    components:
      - esp_adf
    refresh: 0s

i2c:
  sda: GPIO18
  scl: GPIO23
  
i2s_audio:
  - i2s_lrclk_pin: GPIO25
    i2s_bclk_pin: GPIO5

microphone:
  - platform: i2s_audio
    id: mn_microphone
    channel: left
    i2s_din_pin: GPIO26
    adc_type: external
    pdm: false

speaker:
  - platform: i2s_audio
    id: mn_speaker
    dac_type: external
    i2s_dout_pin: GPIO26
    mode: mono

output:
  - platform: gpio
    pin:
      number: GPIO33
      inverted: true
    id: mute_pin
    
esp_adf:

voice_assistant:
  id: va
  microphone: mn_microphone
  speaker: mn_speaker
  use_wake_word: true
  noise_suppression_level: 2
  auto_gain: 31dBFS
  volume_multiplier: 2.0
  vad_threshold: 3
  on_listening:
    - output.turn_on: mute_pin
    - light.turn_on:
        id: led
        blue: 100%
        red: 0%
        green: 0%
        brightness: 100%
        effect: pulse
  on_tts_start:
    - output.turn_off: mute_pin
    - light.turn_on:
        id: led
        blue: 0%
        red: 0%
        green: 100%
        brightness: 100%
        effect: pulse
  on_end:
    - delay: 100ms
    - wait_until:
        not:
          speaker.is_playing:
    - output.turn_on: mute_pin
    - script.execute: reset_led
  on_error:
    - light.turn_on:
        id: led
        blue: 0%
        red: 100%
        green: 0%
        brightness: 100%
        effect: none
    - delay: 1s
    - script.execute: reset_led
    - script.wait: reset_led
    - lambda: |-
        if (code == "wake-provider-missing" || code == "wake-engine-missing") {
          id(use_wake_word).turn_off();
        }

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      inverted: true
      mode:
        input: true
        pullup: true
    name: Action
    disabled_by_default: true
    on_click:
      - if:
          condition:
            switch.is_off: use_wake_word
          then:
            - if:
                condition: voice_assistant.is_running
                then:
                  - voice_assistant.stop:
                  - script.execute: reset_led
                else:
                  - voice_assistant.start:
          else:
            - voice_assistant.stop
            - delay: 1s
            - script.execute: reset_led
            - script.wait: reset_led
            - voice_assistant.start_continuous:

light:
  - platform: esp32_rmt_led_strip
    rmt_channel: 0
    name: None
    id: led
    disabled_by_default: true
    pin: GPIO22
    chipset: WS2812
    num_leds: 1
    rgb_order: grb
    effects:
      - pulse:
          transition_length: 250ms
          update_interval: 250ms

script:
  - id: reset_led
    then:
      - if:
          condition:
            switch.is_on: use_wake_word
          then:
            - light.turn_on:
                id: led
                blue: 100%
                red: 100%
                green: 0%
                brightness: 100%
                effect: none
          else:
            - light.turn_off: led

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    # reset_pin: GPIO0
    address: 0x60
    lambda: |-
      auto white = Color(255, 255, 255);
      it.rectangle(20, 50, 30, 30, white);

#     it.print(0, 0, id(font), "Hello World!"); 

remote_receiver:
  pin: GPIO21
  dump: all

sensor:
  - platform: rotary_encoder
    name: "Rotary Encoder"
    pin_a: GPIO32
    pin_b: GPIO19

switch:
  - platform: template
    name: Use wake word
    id: use_wake_word
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config
    on_turn_on:
      - lambda: id(va).set_use_wake_word(true);
      - if:
          condition:
            not:
              - voice_assistant.is_running
          then:
            - voice_assistant.start_continuous
      - script.execute: reset_led
    on_turn_off:
      - voice_assistant.stop
      - lambda: id(va).set_use_wake_word(false);
      - script.execute: reset_led

